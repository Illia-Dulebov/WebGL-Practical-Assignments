// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;

uniform mat4 ModelViewProjectionMatrix;
uniform mat4 WorldInverseTranspose;
uniform mat4 WorldMatrix;
uniform vec3 LightWorldPosition;
uniform vec3 ViewWorldPosition;

varying vec3 v_normal;
varying vec3 v_surfaceToLight;
varying vec3 v_surfaceToView;

void main() {
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
    v_normal = mat3(WorldInverseTranspose) * normal;
    vec3 surfaceWorldPosition = (WorldMatrix * vec4(vertex, 1.0)).xyz;
    v_surfaceToLight = LightWorldPosition - surfaceWorldPosition;
    v_surfaceToView = ViewWorldPosition - surfaceWorldPosition;
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform vec4 color;
uniform vec3 LightLocation;

varying vec3 v_normal;
varying vec3 v_surfaceToLight;
varying vec3 v_surfaceToView;

void main() {
    vec3 normal = normalize(v_normal);
    vec3 surfaceToLightLocation = normalize(v_surfaceToLight);
    vec3 surfaceToViewDirection = normalize(v_surfaceToView);
    vec3 halfVector = normalize(surfaceToLightLocation + surfaceToViewDirection);
    float dotFromDirection = dot(surfaceToLightLocation, -LightLocation);
    float inLight = smoothstep(cos(100.0 * 3.1415 / 180.0), cos(10.0 * 3.1415 / 180.0), dotFromDirection);
    float light = inLight * dot(normal, surfaceToLightLocation);
    float specular = inLight * pow(dot(normal, halfVector), 8);
    gl_FragColor = color;
    gl_FragColor.rgb *= light;
    gl_FragColor.rgb += specular;
}`;